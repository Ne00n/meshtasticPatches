diff --git a/src/mesh/ReliableRouter.cpp b/src/mesh/ReliableRouter.cpp
index 3e2850bc..ff0de19a 100644
--- a/src/mesh/ReliableRouter.cpp
+++ b/src/mesh/ReliableRouter.cpp
@@ -92,9 +92,12 @@ void ReliableRouter::sniffReceived(const meshtastic_MeshPacket *p, const meshtas
 {
     if (isToUs(p)) { // ignore ack/nak/want_ack packets that are not address to us (we only handle 0 hop reliability)
         if (p->want_ack) {
+            // Only proceed with ACK if it's not a private message (private messages have no channel)
+            bool isPrivateMessage = (p->channel == 0);
+            
             if (MeshModule::currentReply) {
                 LOG_DEBUG("Another module replied to this message, no need for 2nd ack");
-            } else if (p->which_payload_variant == meshtastic_MeshPacket_decoded_tag) {
+            } else if (p->which_payload_variant == meshtastic_MeshPacket_decoded_tag && !isPrivateMessage) {
                 // A response may be set to want_ack for retransmissions, but we don't need to ACK a response if it received an
                 // implicit ACK already. If we received it directly, only ACK with a hop limit of 0
                 if (!p->decoded.request_id)
@@ -107,7 +110,7 @@ void ReliableRouter::sniffReceived(const meshtastic_MeshPacket *p, const meshtas
                 LOG_INFO("PKI packet from unknown node, send PKI_UNKNOWN_PUBKEY");
                 sendAckNak(meshtastic_Routing_Error_PKI_UNKNOWN_PUBKEY, getFrom(p), p->id, channels.getPrimaryIndex(),
                            routingModule->getHopLimitForResponse(p->hop_start, p->hop_limit));
-            } else {
+            } else if (!isPrivateMessage) {  // Only send NO_CHANNEL error if it's not a private message
                 // Send a 'NO_CHANNEL' error on the primary channel if want_ack packet destined for us cannot be decoded
                 sendAckNak(meshtastic_Routing_Error_NO_CHANNEL, getFrom(p), p->id, channels.getPrimaryIndex(),
                            routingModule->getHopLimitForResponse(p->hop_start, p->hop_limit));
