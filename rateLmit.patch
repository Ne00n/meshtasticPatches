diff --git a/src/mesh/Router.cpp b/src/mesh/Router.cpp
index fef29388e..a737c3b87 100644
--- a/src/mesh/Router.cpp
+++ b/src/mesh/Router.cpp
@@ -622,6 +622,7 @@ void Router::handleReceived(meshtastic_MeshPacket *p, RxSource src)
         else
             printPacket("handleReceived(REMOTE)", p);
 
+
         // Neighbor info module is disabled, ignore expensive neighbor info packets
         if (p->which_payload_variant == meshtastic_MeshPacket_decoded_tag &&
             p->decoded.portnum == meshtastic_PortNum_NEIGHBORINFO_APP &&
@@ -633,6 +634,19 @@ void Router::handleReceived(meshtastic_MeshPacket *p, RxSource src)
 
         bool shouldIgnoreNonstandardPorts =
             config.device.rebroadcast_mode == meshtastic_Config_DeviceConfig_RebroadcastMode_CORE_PORTNUMS_ONLY;
+
+        // Check rate limiting after successful decode
+        if (shouldIgnoreNonstandardPorts && p->which_payload_variant == meshtastic_MeshPacket_decoded_tag) {
+            LOG_DEBUG("Checking rate limit for decoded packet from node 0x%x on port %d", p->from, p->decoded.portnum);
+            if (rateLimiter.shouldRateLimit(p->from, p->decoded.portnum)) {
+                LOG_DEBUG("Rate limiting decoded packet from node 0x%x on port %d - dropping packet", p->from, p->decoded.portnum);
+                cancelSending(p->from, p->id);
+                skipHandle = true;
+            } else {
+                LOG_DEBUG("Decoded packet from node 0x%x on port %d passed rate limit check", p->from, p->decoded.portnum);
+            }
+        }
+
 #if USERPREFS_EVENT_MODE
         shouldIgnoreNonstandardPorts = true;
 #endif
diff --git a/src/mesh/Router.h b/src/mesh/Router.h
index 58ca50f3d..86182a158 100644
--- a/src/mesh/Router.h
+++ b/src/mesh/Router.h
@@ -7,6 +7,7 @@
 #include "PacketHistory.h"
 #include "PointerQueue.h"
 #include "RadioInterface.h"
+#include "RateLimiter.h"
 #include "concurrency/OSThread.h"
 
 /**
@@ -18,6 +19,9 @@ class Router : protected concurrency::OSThread, protected PacketHistory
     /// Packets which have just arrived from the radio, ready to be processed by this service and possibly
     /// forwarded to the phone.
     PointerQueue<meshtastic_MeshPacket> fromRadioQueue;
+    
+    /// Rate limiter for controlling packet frequency
+    RateLimiter rateLimiter;
 
   protected:
     RadioInterface *iface = NULL;
